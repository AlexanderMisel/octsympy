#!/usr/bin/python

# Yo dawg, I heard you like code generation so I wrote a code
# generator to write your code generators!


L = """sqrt
exp
log
abs|Abs|-1
floor
ceil|ceiling|3/2
sin
sinh
asin
asinh
cos
cosh
acos
acosh
tan
tanh
atan
atanh||1/2
csc
sec
cot
coth
acot
acoth||2
sign
factorial
gamma
erf
erfc
erfinv
erfcinv
erfi|||%   Note: the erfi unit test fails on Octave < 3.8
heaviside|Heaviside|1,1
dirac|DiracDelta|1,0
"""
# todo:
#psi(x)|polygamma(0,x)
#psi(k,x)|polygamma(k,x)

# sec, csc don't have hyperbolic or arc
#sech asec asech
#csch acsc acsch


# replace L with a list of dictionaries
LL = L.splitlines();
L = [];
for it in LL:
    it = it.split('|')
    print it
    f = it[0]
    d = {'name':f}
    if len(it) >= 2 and it[1] != '':
        d['spname'] = it[1]
    else:
        d['spname'] = f
    if len(it) >= 3 and it[2] != '':
        testvals = it[2].split(',')
        if len(testvals) == 2:
            (d['test_in_val'],d['test_out_val']) = testvals
            d['out_val_from_oct'] = False
        else:
            (d['test_in_val'],) = testvals
            d['out_val_from_oct'] = True
            d['octname'] = f
    else:
        d['test_in_val'] = '1'
        d['out_val_from_oct'] = True
        d['octname'] = f
    if (len(it) >= 4):
        d['extra_code'] = it[3]
    else:
        d['extra_code'] = ''

    L.append(d);


# autogenerate functions
for d in L:
    f = d['name'];
    fname = '@sym/%s.m' % f
    print fname

    fd = open(fname, "w")

    fd.write("function z = %s(x)\n" % f)
    fd.write("%")
    fd.write("%s  Symbolic %s function\n" % (f.upper(),f))

    s = """%
%   Autogenerated, if you want to edit, make changes to
%   'generate_functions.py' instead.
%
"""
    fd.write(s)
    fd.write("%s\n\n" % d['extra_code'])
    fd.write("  cmd = [ 'def fcn(_ins):\\n'    ...\n" )
    fd.write("          '    (x,) = _ins\\n'   ...\n" )
    fd.write("          '    y = sp.%s(x)\\n'  ...\n" % d['spname'])
    fd.write("          '    return (y,)\\n' ];\n")
    fd.write("\n");
    fd.write("  z = python_sympy_cmd(cmd, x);\n\n")
    fd.close()


# Now make simple unit tests
for d in L:
    f = d['name'];
    fname = 'unittests/test_autogen_%s.m' % f
    print fname
    fd = open(fname, "w")
    fd.write ("function r = test_autogen_%s()\n" % f)
    fd.write ("%");
    fd.write ("TEST_AUTOGEN_%s  autogenerated test for symbolic %s\n" % (f.upper(),f))
    fd.write("%\n")
    fd.write("%s\n\n" % d['extra_code'])
    fd.write("  x = sym('%s');\n" % d['test_in_val'])
    fd.write("  f1 = %s(x);\n" % f)
    if d['out_val_from_oct']:
        fd.write("  f2 = %s(%s);\n" % (f, d['test_in_val']))
    else:
        fd.write("  f2 = %s;\n" % (d['test_out_val']))
    fd.write("  r = abs(double(f1) - f2) < 1e-15;\n\n")
    fd.close()

# Output list for .gitignore file
print "**** Optional: copy/paste to update this list in .gitignore ****"

for d in L:
    f = d['name']
    print "@sym/%s.m" % f

for d in L:
    f = d['name']
    print "unittests/test_autogen_%s.m" % f
